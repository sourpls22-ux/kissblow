import { adminDatabase } from './adminDatabase.js'

export const adminCommands = {
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async showUsersMenu(bot, chatId, db) {
    const users = await adminDatabase.getAllUsers(db)
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...users.slice(0, 10).map(user => [
            {
              text: `üë§ ${user.name} (${user.email})`,
              callback_data: `user_details_${user.id}`
            }
          ]),
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ email', callback_data: 'user_search_email' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ ID', callback_data: 'user_search_id' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    const text = `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∫–µ—Ç
  async showProfilesMenu(bot, chatId, db) {
    const profiles = await adminDatabase.getAllProfiles(db)
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...profiles.slice(0, 10).map(profile => [
            {
              text: `üìã ${profile.name} (${profile.city}) ${profile.is_verified ? '‚úÖ' : '‚ùå'}`,
              callback_data: `profile_details_${profile.id}`
            }
          ]),
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏', callback_data: 'profile_search_name' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É', callback_data: 'profile_search_city' }
          ],
          [
            { text: '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'profiles_verified' },
            { text: '‚ùå –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'profiles_unverified' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    const verifiedCount = profiles.filter(p => p.is_verified).length
    const activeCount = profiles.filter(p => p.is_active).length
    
    const text = `üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∞–º–∏*\n\n–í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: ${profiles.length}\n–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${verifiedCount}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeCount}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:`
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–≤—å—é
  async showReviewsMenu(bot, chatId, db) {
    const reviews = await adminDatabase.getAllReviews(db)
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...reviews.slice(0, 10).map(review => [
            {
              text: `‚≠ê ${review.profile_name} - ${review.user_name}`,
              callback_data: `review_details_${review.id}`
            }
          ]),
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–∫–µ—Ç–µ', callback_data: 'review_search_profile' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: 'review_search_user' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    const text = `‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≤—å—é*\n\n–í—Å–µ–≥–æ —Ä–µ–≤—å—é: ${reviews.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≤—å—é:`
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–∞–π–∫–æ–≤
  async showLikesMenu(bot, chatId, db) {
    const likes = await adminDatabase.getLikesStats(db)
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          ...likes.slice(0, 10).map(like => [
            {
              text: `‚ù§Ô∏è ${like.profile_name} - ${like.likes_count} –ª–∞–π–∫–æ–≤`,
              callback_data: `like_details_${like.profile_id}`
            }
          ]),
          [
            { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–∫–µ—Ç–µ', callback_data: 'like_search_profile' },
            { text: 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'likes_overall_stats' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    const totalLikes = likes.reduce((sum, like) => sum + like.likes_count, 0)
    
    const text = `‚ù§Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞–º–∏*\n\n–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: ${totalLikes}\n–ê–Ω–∫–µ—Ç —Å –ª–∞–π–∫–∞–º–∏: ${likes.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:`
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async showStats(bot, chatId, db) {
    const stats = await adminDatabase.getOverallStats(db)
    
    const text = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n` +
      `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}\n` +
      `‚Ä¢ –ú–æ–¥–µ–ª–∏: ${stats.modelUsers}\n` +
      `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${stats.memberUsers}\n` +
      `‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $${stats.totalBalance.toFixed(2)}\n\n` +
      `üìã *–ê–Ω–∫–µ—Ç—ã:*\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalProfiles}\n` +
      `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeProfiles}\n` +
      `‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.verifiedProfiles}\n` +
      `‚Ä¢ –° –±—É—Å—Ç–æ–º: ${stats.boostedProfiles}\n\n` +
      `‚≠ê *–†–µ–≤—å—é:*\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalReviews}\n\n` +
      `‚ù§Ô∏è *–õ–∞–π–∫–∏:*\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalLikes}\n\n` +
      `üí∞ *–î–æ—Ö–æ–¥—ã:*\n` +
      `‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: $${stats.totalRevenue.toFixed(2)}\n` +
      `‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: $${stats.todayRevenue.toFixed(2)}`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  async showHelp(bot, chatId) {
    const text = `‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏*\n\n` +
      `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ email –∏–ª–∏ ID\n` +
      `‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n` +
      `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n` +
      `‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n\n` +
      `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∞–º–∏:*\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç\n` +
      `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥—É\n` +
      `‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç\n` +
      `‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è\n` +
      `‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è/–æ—Ç–º–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n` +
      `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≤—å—é:*\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ–≤—å—é\n` +
      `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–∫–µ—Ç–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
      `‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≤—å—é\n\n` +
      `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞–º–∏:*\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∞–π–∫–æ–≤\n` +
      `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤\n` +
      `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–∫–µ—Ç–µ\n\n` +
      `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  async handleUserAction(bot, chatId, data, db) {
    const [action, type, id] = data.split('_')
    
    switch (type) {
      case 'details':
        await this.showUserDetails(bot, chatId, id, db)
        break
      case 'delete':
        await this.deleteUser(bot, chatId, id, db)
        break
      case 'balance':
        await this.showBalanceMenu(bot, chatId, id, db)
        break
      case 'block':
        await this.blockUser(bot, chatId, id, db)
        break
      case 'unblock':
        await this.unblockUser(bot, chatId, id, db)
        break
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserDetails(bot, chatId, userId, db) {
    const user = await adminDatabase.getUserById(db, userId)
    const profiles = await adminDatabase.getUserProfiles(db, userId)
    
    if (!user) {
      bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    const text = `üë§ *–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
      `ID: ${user.id}\n` +
      `–ò–º—è: ${user.name}\n` +
      `Email: ${user.email}\n` +
      `–¢–∏–ø: ${user.account_type === 'model' ? '–ú–æ–¥–µ–ª—å' : '–£—á–∞—Å—Ç–Ω–∏–∫'}\n` +
      `–ë–∞–ª–∞–Ω—Å: $${user.balance}\n` +
      `–°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n` +
      `–ê–Ω–∫–µ—Ç: ${profiles.length}`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: `user_balance_${userId}` },
            { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `user_block_${userId}` }
          ],
          [
            { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: `user_delete_${userId}` },
            { text: 'üìã –ê–Ω–∫–µ—Ç—ã', callback_data: `user_profiles_${userId}` }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_users' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(bot, chatId, userId, db) {
    try {
      await adminDatabase.deleteUser(db, userId)
      bot.sendMessage(chatId, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
  async showBalanceMenu(bot, chatId, userId, db) {
    const user = await adminDatabase.getUserById(db, userId)
    
    if (!user) {
      bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    const text = `üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º*\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}\n` +
      `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${user.balance}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å $10', callback_data: `balance_add_${userId}_10` },
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å $50', callback_data: `balance_add_${userId}_50` }
          ],
          [
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å $100', callback_data: `balance_add_${userId}_100` },
            { text: '‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å $10', callback_data: `balance_sub_${userId}_10` }
          ],
          [
            { text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É', callback_data: `balance_set_${userId}` },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `user_details_${userId}` }
          ]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–Ω–∫–µ—Ç–∞–º–∏
  async handleProfileAction(bot, chatId, data, db) {
    const [action, type, id] = data.split('_')
    
    switch (type) {
      case 'details':
        await this.showProfileDetails(bot, chatId, id, db)
        break
      case 'delete':
        await this.deleteProfile(bot, chatId, id, db)
        break
      case 'verify':
        await this.verifyProfile(bot, chatId, id, db)
        break
      case 'unverify':
        await this.unverifyProfile(bot, chatId, id, db)
        break
      case 'activate':
        await this.activateProfile(bot, chatId, id, db)
        break
      case 'deactivate':
        await this.deactivateProfile(bot, chatId, id, db)
        break
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã
  async showProfileDetails(bot, chatId, profileId, db) {
    const profile = await adminDatabase.getProfileById(db, profileId)
    
    if (!profile) {
      bot.sendMessage(chatId, '‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    const text = `üìã *–î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã*\n\n` +
      `ID: ${profile.id}\n` +
      `–ò–º—è: ${profile.name}\n` +
      `–í–æ–∑—Ä–∞—Å—Ç: ${profile.age}\n` +
      `–ì–æ—Ä–æ–¥: ${profile.city}\n` +
      `–°—Ç–∞—Ç—É—Å: ${profile.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n` +
      `–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${profile.is_verified ? '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞' : '‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞'}\n` +
      `–°–æ–∑–¥–∞–Ω–∞: ${new Date(profile.created_at).toLocaleDateString('ru-RU')}`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: profile.is_verified ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é' : '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', 
              callback_data: `profile_${profile.is_verified ? 'unverify' : 'verify'}_${profileId}` },
            { text: profile.is_active ? 'üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 
              callback_data: `profile_${profile.is_active ? 'deactivate' : 'activate'}_${profileId}` }
          ],
          [
            { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: `profile_delete_${profileId}` },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `profile_stats_${profileId}` }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_profiles' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É
  async deleteProfile(bot, chatId, profileId, db) {
    try {
      await adminDatabase.deleteProfile(db, profileId)
      bot.sendMessage(chatId, '‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã')
    }
  },

  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
  async verifyProfile(bot, chatId, profileId, db) {
    try {
      await adminDatabase.verifyProfile(db, profileId)
      bot.sendMessage(chatId, '‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã')
    }
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∞–Ω–∫–µ—Ç—ã
  async unverifyProfile(bot, chatId, profileId, db) {
    try {
      await adminDatabase.unverifyProfile(db, profileId)
      bot.sendMessage(chatId, '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    }
  },

  // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
  async activateProfile(bot, chatId, profileId, db) {
    try {
      await adminDatabase.activateProfile(db, profileId)
      bot.sendMessage(chatId, '‚úÖ –ê–Ω–∫–µ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã')
    }
  },

  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
  async deactivateProfile(bot, chatId, profileId, db) {
    try {
      await adminDatabase.deactivateProfile(db, profileId)
      bot.sendMessage(chatId, '‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã')
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–≤—å—é
  async handleReviewAction(bot, chatId, data, db) {
    const [action, type, id] = data.split('_')
    
    switch (type) {
      case 'details':
        await this.showReviewDetails(bot, chatId, id, db)
        break
      case 'delete':
        await this.deleteReview(bot, chatId, id, db)
        break
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–≤—å—é
  async showReviewDetails(bot, chatId, reviewId, db) {
    const review = await adminDatabase.getReviewById(db, reviewId)
    
    if (!review) {
      bot.sendMessage(chatId, '‚ùå –†–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    const text = `‚≠ê *–î–µ—Ç–∞–ª–∏ —Ä–µ–≤—å—é*\n\n` +
      `ID: ${review.id}\n` +
      `–ê–Ω–∫–µ—Ç–∞: ${review.profile_name}\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${review.user_name}\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${review.rating}/5\n` +
      `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n` +
      `–î–∞—Ç–∞: ${new Date(review.created_at).toLocaleDateString('ru-RU')}`
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–≤—å—é', callback_data: `review_delete_${reviewId}` }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_reviews' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  },

  // –£–¥–∞–ª–∏—Ç—å —Ä–µ–≤—å—é
  async deleteReview(bot, chatId, reviewId, db) {
    try {
      await adminDatabase.deleteReview(db, reviewId)
      bot.sendMessage(chatId, '‚úÖ –†–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–≤—å—é')
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∞–π–∫–∞–º–∏
  async handleLikeAction(bot, chatId, data, db) {
    const [action, type, id] = data.split('_')
    
    switch (type) {
      case 'details':
        await this.showLikeDetails(bot, chatId, id, db)
        break
      case 'add':
        await this.addLikes(bot, chatId, id, db)
        break
      case 'remove':
        await this.removeLikes(bot, chatId, id, db)
        break
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∞–π–∫–æ–≤
  async showLikeDetails(bot, chatId, profileId, db) {
    const likes = await adminDatabase.getProfileLikes(db, profileId)
    const profile = await adminDatabase.getProfileById(db, profileId)
    
    if (!profile) {
      bot.sendMessage(chatId, '‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    const text = `‚ù§Ô∏è *–õ–∞–π–∫–∏ –∞–Ω–∫–µ—Ç—ã*\n\n` +
      `–ê–Ω–∫–µ—Ç–∞: ${profile.name}\n` +
      `–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: ${likes.length}\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏:\n` +
      likes.slice(0, 5).map(like => 
        `‚Ä¢ ${like.user_name} (${new Date(like.created_at).toLocaleDateString('ru-RU')})`
      ).join('\n')
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫–∏', callback_data: `like_add_${profileId}` },
            { text: '‚ûñ –£–±—Ä–∞—Ç—å –ª–∞–π–∫–∏', callback_data: `like_remove_${profileId}` }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_likes' }]
        ]
      }
    }
    
    bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...keyboard
    })
  }
}
