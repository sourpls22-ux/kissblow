import TelegramBot from 'node-telegram-bot-api'
import axios from 'axios'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7762390260:AAHBTsEZXFl1VL200pZO54qicwuEKomhnYY'
const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID || '1119283257'
const API_BASE_URL = process.env.BACKEND_URL || 'http://localhost:5000'

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true })

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
console.log('üîç Verification Bot starting...')
console.log(`üì± Admin ID: ${ADMIN_ID}`)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå Verification Bot error:', error)
})

bot.on('polling_error', (error) => {
  console.error('‚ùå Verification Bot polling error:', error)
})

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  const welcomeMessage = `
üîç *KissBlow Verification Bot*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/verifications - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
/help - –ü–æ–º–æ—â—å

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ñ–æ—Ç–æ —Å –∫–æ–¥–æ–º
  `
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' })
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const sendSingleVerification = async (chatId, verification) => {
  const message = `
üîç *VERIFICATION REQUEST #${verification.id}*
üë§ ${verification.name}, ${verification.age}, ${verification.city}
üìÖ ${new Date(verification.created_at).toLocaleString('ru-RU')}
üî¢ –ö–æ–¥: *${verification.verification_code}*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${verification.user_email}
üí∞ –ë–∞–ª–∞–Ω—Å: $${verification.balance || 0}
üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: ${verification.profile_media ? verification.profile_media.length : 0}
üì∏ –§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${verification.verification_photo_filename ? '–î–∞' : '–ù–µ—Ç'}
  `
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  const photos = []
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  if (verification.profile_media && verification.profile_media.length > 0) {
    for (const media of verification.profile_media) {
      try {
        const photoPath = path.join(__dirname, '..', media.filename)
        if (fs.existsSync(photoPath)) {
          photos.push({
            type: 'photo',
            media: fs.createReadStream(photoPath),
            caption: photos.length === 0 ? `üì∏ Profile Photos` : undefined
          })
        }
      } catch (error) {
        console.error('Error adding profile photo:', error)
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (verification.main_photo_filename) {
    try {
      const mainPhotoPath = path.join(__dirname, '..', verification.main_photo_filename)
      if (fs.existsSync(mainPhotoPath)) {
        photos.push({
          type: 'photo',
          media: fs.createReadStream(mainPhotoPath),
          caption: photos.length === 0 ? `üì∏ Main Profile Photo` : undefined
        })
      }
    } catch (error) {
      console.error('Error adding main profile photo:', error)
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (verification.verification_photo_filename) {
    try {
      const verificationPhotoPath = path.join(__dirname, '..', 'uploads', 'verifications', verification.verification_photo_filename)
      if (fs.existsSync(verificationPhotoPath)) {
        photos.push({
          type: 'photo',
          media: fs.createReadStream(verificationPhotoPath),
          caption: photos.length === 0 ? `üì∏ Verification Photo` : undefined
        })
      }
    } catch (error) {
      console.error('Error adding verification photo:', error)
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ Approve', callback_data: `verify_approve_${verification.id}` },
        { text: '‚ùå Reject', callback_data: `verify_reject_${verification.id}` }
      ]
    ]
  }
  
  if (photos.length > 0) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try {
      await bot.sendMediaGroup(chatId, photos)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { 
        reply_markup: keyboard 
      })
    } catch (error) {
      console.error('Error sending media group:', error)
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    }
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    })
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /verifications
bot.onText(/\/verifications/, async (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π
    const response = await axios.get(`${API_BASE_URL}/api/admin/verifications`, {
      headers: {
        'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345'
      }
    })
    const verifications = response.data
    
    if (verifications.length === 0) {
      bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π')
      return
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const verification = verifications[0]
    await sendSingleVerification(chatId, verification)
    
  } catch (error) {
    console.error('Verifications error:', error)
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: ${error.message}`)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id
  const data = callbackQuery.data
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞' })
    return
  }
  
  try {
    if (data === 'view_verifications') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
      const chatId = callbackQuery.message.chat.id
      
      try {
        const response = await axios.get(`${API_BASE_URL}/api/admin/verifications`, {
          headers: {
            'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345'
          }
        })
        const verifications = response.data
        
        if (verifications.length === 0) {
          bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π')
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
          await sendSingleVerification(chatId, verifications[0])
        }
      } catch (error) {
        console.error('Verifications error:', error)
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: ${error.message}`)
      }
      
      bot.answerCallbackQuery(callbackQuery.id, { text: 'üìã –ó–∞–≥—Ä—É–∂–∞—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...' })
      return
    }
    
    if (data.startsWith('verify_approve_')) {
      const verificationId = data.replace('verify_approve_', '')
      
      await axios.post(`${API_BASE_URL}/api/admin/verifications/${verificationId}/approve`, {}, {
        headers: {
          'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345'
        }
      })
      
      bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!' })
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
      try {
        const response = await axios.get(`${API_BASE_URL}/api/admin/verifications`, {
          headers: { 'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345' }
        })
        
        if (response.data.length === 0) {
          bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π')
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
          await sendSingleVerification(chatId, response.data[0])
        }
      } catch (error) {
        console.error('Error checking remaining verifications:', error)
      }
      
      bot.editMessageText(
        `‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è #${verificationId} –æ–¥–æ–±—Ä–µ–Ω–∞!`,
        { 
          chat_id: chatId, 
          message_id: callbackQuery.message.message_id 
        }
      )
      
    } else if (data.startsWith('verify_reject_')) {
      const verificationId = data.replace('verify_reject_', '')
      
      await axios.post(`${API_BASE_URL}/api/admin/verifications/${verificationId}/reject`, {}, {
        headers: {
          'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345'
        }
      })
      
      bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!' })
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
      try {
        const response = await axios.get(`${API_BASE_URL}/api/admin/verifications`, {
          headers: { 'X-Admin-Key': process.env.ADMIN_API_KEY || 'kissblow-admin-2024-verification-bot-key-12345' }
        })
        
        if (response.data.length === 0) {
          bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π')
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
          await sendSingleVerification(chatId, response.data[0])
        }
      } catch (error) {
        console.error('Error checking remaining verifications:', error)
      }
      
      bot.editMessageText(
        `‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è #${verificationId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`,
        { 
          chat_id: chatId, 
          message_id: callbackQuery.message.message_id 
        }
      )
    }
  } catch (error) {
    console.error('Callback error:', error)
    bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' })
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  const helpMessage = `
üÜò *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏*

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/verifications - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–æ—Ü–µ—Å—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ —Å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ñ–æ—Ç–æ —Å –∫–æ–¥–æ–º
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –∫–æ–¥–æ–º –≤ –∑–∞—è–≤–∫–µ
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  `
  
  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' })
})

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
bot.sendMessage(ADMIN_ID, 'üîç KissBlow Verification Bot –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')

console.log('‚úÖ Verification Bot started successfully!')
