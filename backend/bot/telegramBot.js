import TelegramBot from 'node-telegram-bot-api'
import cron from 'node-cron'
import { createBackup } from './backupService.js'
import { scheduleBackups } from './schedule.js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7760908645:AAEZEDxzE14WEXtQk8AtgFzjNIhy6BuUXEc'
const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID || '1119283257'
const PROJECT_ROOT = path.join(__dirname, '..')

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true })

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
console.log('ü§ñ Telegram Bot starting...')
console.log(`üì± Admin ID: ${ADMIN_ID}`)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error)
})

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error)
})

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  const welcomeMessage = `
ü§ñ *KissBlow Backup Bot*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/backup - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø —Å–µ–π—á–∞—Å
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
/help - –ü–æ–º–æ—â—å

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00 UTC
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚Ä¢ –°–∂–∞—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  `
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' })
})

// –ö–æ–º–∞–Ω–¥–∞ /backup
bot.onText(/\/backup/, async (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  try {
    bot.sendMessage(chatId, 'üîÑ –°–æ–∑–¥–∞—é –±–µ–∫–∞–ø...')
    
    const backupPath = await createBackup()
    
    if (backupPath) {
      bot.sendMessage(chatId, '‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      const fileStream = fs.createReadStream(backupPath)
      await bot.sendDocument(chatId, fileStream, {
        caption: `üì¶ –ë–µ–∫–∞–ø KissBlow\nüìÖ ${new Date().toLocaleString('ru-RU')}\nüíæ ${(fs.statSync(backupPath).size / 1024 / 1024).toFixed(2)} MB`
      })
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(backupPath)
      bot.sendMessage(chatId, 'üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
    } else {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞')
    }
  } catch (error) {
    console.error('Backup error:', error)
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /status
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    const dbPath = path.join(PROJECT_ROOT, 'database.sqlite')
    const dbExists = fs.existsSync(dbPath)
    const dbSize = dbExists ? (fs.statSync(dbPath).size / 1024 / 1024).toFixed(2) : 'N/A'
    
    const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã KissBlow*

üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbExists ? '‚úÖ' : '‚ùå'} (${dbSize} MB)
ü§ñ –ë–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–µ–∫–∞–ø: ${getLastBackupTime()}
üíæ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${getFreeSpace()}

*–°–µ—Ä–≤–∏—Å—ã:*
‚Ä¢ Web Server: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PM2
‚Ä¢ Database: ${dbExists ? 'OK' : 'Missing'}
‚Ä¢ Bot: Running
    `
    
    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' })
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /logs
bot.onText(/\/logs/, async (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    const logPath = path.join(PROJECT_ROOT, '..', 'logs')
    const logFiles = fs.existsSync(logPath) ? fs.readdirSync(logPath) : []
    
    if (logFiles.length === 0) {
      bot.sendMessage(chatId, 'üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
    const latestLog = logFiles
      .filter(f => f.endsWith('.log'))
      .sort()
      .pop()
    
    if (latestLog) {
      const logContent = fs.readFileSync(path.join(logPath, latestLog), 'utf8')
      const lastLines = logContent.split('\n').slice(-20).join('\n')
      
      bot.sendMessage(chatId, `üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:*\n\`\`\`\n${lastLines}\n\`\`\``, { 
        parse_mode: 'Markdown' 
      })
    } else {
      bot.sendMessage(chatId, 'üìù –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  const helpMessage = `
üÜò *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/backup - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/logs - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã:*
‚Ä¢ –í—Ä–µ–º—è: 02:00 UTC –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚Ä¢ –§–æ—Ä–º–∞—Ç: ZIP –∞—Ä—Ö–∏–≤
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞: –í —ç—Ç–æ—Ç —á–∞—Ç

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ë–µ–∫–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è
  `
  
  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' })
})

// –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏
function getLastBackupTime() {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
  return '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è'
}

function getFreeSpace() {
  try {
    const stats = fs.statSync(PROJECT_ROOT)
    return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é'
  } catch {
    return 'N/A'
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∫–∞–ø–æ–≤
scheduleBackups(bot, ADMIN_ID)

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
bot.sendMessage(ADMIN_ID, 'ü§ñ KissBlow Backup Bot –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')

console.log('‚úÖ Telegram Bot started successfully!')
