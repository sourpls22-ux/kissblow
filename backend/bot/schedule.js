import cron from 'node-cron'
import { createBackup, cleanupOldBackups } from './backupService.js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const PROJECT_ROOT = path.join(__dirname, '..')

export function scheduleBackups(bot, adminId) {
  console.log('‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∫–∞–ø–æ–≤...')
  
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø –≤ 02:00 UTC
  cron.schedule('0 2 * * *', async () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...')
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–µ–∫–∞–ø–∞
      await bot.sendMessage(adminId, 'üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...')
      
      // –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
      const backupPath = await createBackup()
      
      if (backupPath) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        const fileStream = fs.createReadStream(backupPath)
        await bot.sendDocument(adminId, fileStream, {
          caption: `üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø KissBlow\nüìÖ ${new Date().toLocaleString('ru-RU')}\nüíæ ${(fs.statSync(backupPath).size / 1024 / 1024).toFixed(2)} MB`
        })
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(backupPath)
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã
        cleanupOldBackups(7) // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        await bot.sendMessage(adminId, '‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω!')
        console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω')
      } else {
        await bot.sendMessage(adminId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞')
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞:', error)
      await bot.sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞: ${error.message}`)
    }
  }, {
    timezone: 'UTC'
  })
  
  // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–µ–∫–∞–ø –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00 UTC
  cron.schedule('0 3 * * 0', async () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...')
    
    try {
      await bot.sendMessage(adminId, 'üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...')
      
      const backupPath = await createBackup()
      
      if (backupPath) {
        const fileStream = fs.createReadStream(backupPath)
        await bot.sendDocument(adminId, fileStream, {
          caption: `üì¶ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–µ–∫–∞–ø KissBlow\nüìÖ ${new Date().toLocaleString('ru-RU')}\nüíæ ${(fs.statSync(backupPath).size / 1024 / 1024).toFixed(2)} MB`
        })
        
        fs.unlinkSync(backupPath)
        cleanupOldBackups(14) // –î–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ
        
        await bot.sendMessage(adminId, '‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω!')
        console.log('‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞:', error)
      await bot.sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞: ${error.message}`)
    }
  }, {
    timezone: 'UTC'
  })
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  cron.schedule('0 */6 * * *', async () => {
    try {
      const dbPath = path.join(PROJECT_ROOT, 'database.sqlite')
      const dbExists = fs.existsSync(dbPath)
      
      if (!dbExists) {
        await bot.sendMessage(adminId, '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error)
    }
  })
  
  console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∫–∞–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:')
  console.log('  üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00 UTC')
  console.log('  üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00 UTC')
  console.log('  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–∞–ø–∞
export async function runManualBackup(bot, adminId) {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...')
    
    await bot.sendMessage(adminId, 'üîÑ –°–æ–∑–¥–∞—é —Ä—É—á–Ω–æ–π –±–µ–∫–∞–ø...')
    
    const backupPath = await createBackup()
    
    if (backupPath) {
      const fileStream = fs.createReadStream(backupPath)
      await bot.sendDocument(adminId, fileStream, {
        caption: `üì¶ –†—É—á–Ω–æ–π –±–µ–∫–∞–ø KissBlow\nüìÖ ${new Date().toLocaleString('ru-RU')}\nüíæ ${(fs.statSync(backupPath).size / 1024 / 1024).toFixed(2)} MB`
      })
      
      fs.unlinkSync(backupPath)
      
      await bot.sendMessage(adminId, '‚úÖ –†—É—á–Ω–æ–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω!')
      console.log('‚úÖ –†—É—á–Ω–æ–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω')
    } else {
      await bot.sendMessage(adminId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞:', error)
    await bot.sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞: ${error.message}`)
  }
}
